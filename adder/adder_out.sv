/* Generated by Yosys 0.36+3 (git sha1 a53032104, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

(* top =  1  *)
(* src = "adder.sv:3.1-18.10" *)
module adder(a_in, b_in, x_out, clk, scan_in, scan_en, scan_out);
  (* src = "adder.sv:11.5-16.8" *)
  wire _00_;
  (* src = "adder.sv:11.5-16.8" *)
  wire _01_;
  (* src = "adder.sv:11.5-16.8" *)
  wire _02_;
  (* src = "adder.sv:11.5-16.8" *)
  wire _03_;
  (* src = "adder.sv:11.5-16.8" *)
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  (* src = "adder.sv:4.23-4.27" *)
  input [3:0] a_in;
  wire [3:0] a_in;
  (* src = "adder.sv:9.17-9.22" *)
  reg \a_reg[0] ;
  (* src = "adder.sv:9.17-9.22" *)
  reg \a_reg[1] ;
  (* src = "adder.sv:9.17-9.22" *)
  reg \a_reg[2] ;
  (* src = "adder.sv:9.17-9.22" *)
  reg \a_reg[3] ;
  (* src = "adder.sv:4.29-4.33" *)
  input [3:0] b_in;
  wire [3:0] b_in;
  (* src = "adder.sv:9.24-9.29" *)
  reg \b_reg[0] ;
  (* src = "adder.sv:9.24-9.29" *)
  reg \b_reg[1] ;
  (* src = "adder.sv:9.24-9.29" *)
  reg \b_reg[2] ;
  (* src = "adder.sv:9.24-9.29" *)
  wire \b_reg[3] ;
  (* src = "adder.sv:6.17-6.20" *)
  input clk;
  wire clk;
  input scan_en;
  wire scan_en;
  input scan_in;
  wire scan_in;
  output scan_out;
  reg scan_out;
  (* src = "adder.sv:5.24-5.29" *)
  output [4:0] x_out;
  reg [4:0] x_out;
  assign { _04_, _03_, _02_, _01_, _00_ } = { \a_reg[3] , \a_reg[2] , \a_reg[1] , \a_reg[0]  } + (* src = "adder.sv:15.18-15.31" *) { scan_out, \b_reg[2] , \b_reg[1] , \b_reg[0]  };
  (* \always_ff  = 32'd1 *)
  (* src = "adder.sv:11.5-16.8" *)
  always @(posedge clk)
    x_out <= { _17_, _06_, _07_, _08_, _09_ };
  (* \always_ff  = 32'd1 *)
  (* src = "adder.sv:11.5-16.8" *)
  always @(posedge clk)
    \a_reg[0]  <= _16_;
  (* \always_ff  = 32'd1 *)
  (* src = "adder.sv:11.5-16.8" *)
  always @(posedge clk)
    \a_reg[1]  <= _15_;
  (* \always_ff  = 32'd1 *)
  (* src = "adder.sv:11.5-16.8" *)
  always @(posedge clk)
    \a_reg[2]  <= _14_;
  (* \always_ff  = 32'd1 *)
  (* src = "adder.sv:11.5-16.8" *)
  always @(posedge clk)
    \a_reg[3]  <= _13_;
  (* \always_ff  = 32'd1 *)
  (* src = "adder.sv:11.5-16.8" *)
  always @(posedge clk)
    \b_reg[0]  <= _12_;
  (* \always_ff  = 32'd1 *)
  (* src = "adder.sv:11.5-16.8" *)
  always @(posedge clk)
    \b_reg[1]  <= _11_;
  (* \always_ff  = 32'd1 *)
  (* src = "adder.sv:11.5-16.8" *)
  always @(posedge clk)
    \b_reg[2]  <= _10_;
  (* \always_ff  = 32'd1 *)
  (* src = "adder.sv:11.5-16.8" *)
  always @(posedge clk)
    scan_out <= _05_;
  assign _09_ = scan_en ? scan_in : _00_;
  assign _08_ = scan_en ? x_out[0] : _01_;
  assign _07_ = scan_en ? x_out[1] : _02_;
  assign _06_ = scan_en ? x_out[2] : _03_;
  assign _17_ = scan_en ? x_out[3] : _04_;
  assign _16_ = scan_en ? x_out[4] : a_in[0];
  assign _15_ = scan_en ? \a_reg[0]  : a_in[1];
  assign _14_ = scan_en ? \a_reg[1]  : a_in[2];
  assign _13_ = scan_en ? \a_reg[2]  : a_in[3];
  assign _12_ = scan_en ? \a_reg[3]  : b_in[0];
  assign _11_ = scan_en ? \b_reg[0]  : b_in[1];
  assign _10_ = scan_en ? \b_reg[1]  : b_in[2];
  assign _05_ = scan_en ? \b_reg[2]  : b_in[3];
  assign \b_reg[3]  = scan_out;
endmodule
